  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: https://${{ secrets.APP_NAME_BACKEND }}.azurewebsites.net # URL estática aqui
    
    # Adicionamos uma saída para que o próximo job saiba o nome do app
    outputs:
      webapp-name: ${{ secrets.APP_NAME_BACKEND }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact
        run: unzip release.zip

      - name: Create .env file for deployment
        run: |
          echo "Creating .env file with hardcoded connection string..."
          cat > .env << EOF
          CORS_ORIGINS=https://${{ secrets.APP_NAME_FRONTEND }}.azurewebsites.net
          AZURE_SQL_CONNECTIONSTRING=Server=tcp:expandev-sql-server-br.database.windows.net,1433;Initial Catalog=expandev-main;Persist Security Info=False;User ID=sqladmin;Password=Expandev2024!;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
          EOF

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.APP_NAME_BACKEND }}
          package: .
          
      # Este passo é novo. Vamos subir a pasta com os scripts como um artefato
      # para que o próximo job possa acessá-los.
      - name: Upload database folder for SQL job
        uses: actions/upload-artifact@v4
        with:
          name: sql-scripts
          path: |
            database/
            backend/database/
          if-no-files-found: ignore # Não falha se a pasta não existir

  prepare-sql-matrix:
    runs-on: ubuntu-latest
    needs: deploy
    outputs:
      # A saída deste job será a lista de scripts em formato JSON
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Download SQL scripts
        uses: actions/download-artifact@v4
        with:
          name: sql-scripts
          path: sql-scripts-folder

      - name: Create list of SQL files for the matrix
        id: set-matrix
        run: |
          DB_PATH=""
          # Verifica em qual dos possíveis locais a pasta foi baixada
          if [ -d "sql-scripts-folder/database" ]; then
            DB_PATH="sql-scripts-folder/database"
          elif [ -d "sql-scripts-folder/backend/database" ]; then
            DB_PATH="sql-scripts-folder/backend/database"
          fi
          
          # Se a pasta existir e contiver arquivos .sql
          if [ -n "$DB_PATH" ] && ls $DB_PATH/*.sql 1> /dev/null 2>&1; then
            # Cria um array JSON com a lista de arquivos. Ex: ["script1.sql", "script2.sql"]
            # O comando 'jq' é perfeito para isso e já vem instalado nos runners.
            LIST=$(ls -v $DB_PATH/*.sql | jq -R . | jq -s .)
            echo "Found scripts: $LIST"
            echo "matrix=$LIST" >> $GITHUB_OUTPUT
          else
            echo "No SQL files found. Matrix will be empty."
            echo "matrix=[]" >> $GITHUB_OUTPUT
          fi

  execute-sql-scripts:
    runs-on: ubuntu-latest
    # Precisa dos dois jobs anteriores
    needs: [deploy, prepare-sql-matrix]
    # Só executa se a matriz (lista de scripts) não estiver vazia
    if: needs.prepare-sql-matrix.outputs.matrix != '[]'

    strategy:
      # Não para os outros jobs se um script falhar. Vemos todos os resultados.
      fail-fast: false
      # A MÁGICA ACONTECE AQUI!
      # 'matrix.sqlfile' será cada um dos nomes de arquivo da lista gerada
      matrix:
        sqlfile: ${{ fromJson(needs.prepare-sql-matrix.outputs.matrix) }}

    steps:
      - name: Download SQL scripts
        uses: actions/download-artifact@v4
        with:
          name: sql-scripts
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: 'Execute SQL Script: ${{ matrix.sqlfile }}'
        uses: azure/sql-action@v2.2
        with:
          # A connection string, como você queria
          connection-string: 'Server=tcp:expandev-sql-server-br.database.windows.net,1433;Initial Catalog=expandev-main;Persist Security Info=False;User ID=sqladmin;Password=Expandev2024!;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;'
          # O caminho para o script é dinâmico, vindo da matriz
          path: '${{ matrix.sqlfile }}'

      - name: Verify deployment health
        # Este passo continua igual ao seu original
        run: |
          echo "Waiting for deployment to be ready..."
          APP_URL="https://${{ secrets.APP_NAME_BACKEND }}.azurewebsites.net"
          for i in {1..12}; do
            echo "Health check attempt $i/12..."
            for ENDPOINT in "/health" "/api/health" "/"; do
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL$ENDPOINT" || echo "000")
              if [[ "$HTTP_CODE" =~ ^[2-5][0-9][0-9]$ ]] && [ "$HTTP_CODE" != "503" ]; then
                echo "✅ Backend is responding! (HTTP $HTTP_CODE at $ENDPOINT)"
                echo "Deployment successful: $APP_URL"
                exit 0
              fi
            done
            if [ $i -lt 12 ]; then
              sleep 15
            fi
          done
          echo "⚠️ Backend health check did not get a response after 3 minutes"
          exit 0