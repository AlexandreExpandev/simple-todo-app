name: Deploy React Frontend to Azure Web App

on:
  workflow_dispatch:
  # Push trigger comentado para evitar deploy automático no primeiro commit
  # Descomente as linhas abaixo se quiser deploy automático em futuros pushes:
  # push:
  #   branches:
  #     - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: npm install, build, and test
        working-directory: ./frontend
        env:
          VITE_API_URL: https://expandev-app-07.azurewebsites.net
          VITE_API_BASE_URL: https://expandev-app-07.azurewebsites.net
          REACT_APP_API_URL: https://expandev-app-07.azurewebsites.net
          API_BASE_URL: https://expandev-app-07.azurewebsites.net
        run: |
          npm install
          echo "Building with API URL: https://expandev-app-07.azurewebsites.net"
          npm run build
          npm run test --if-present -- --passWithNoTests || true

      - name: Prepare for deployment
        working-directory: ./frontend
        run: |
          # Detectar pasta de build (Vite usa dist/, CRA usa build/)
          if [ -d "dist" ]; then
            BUILD_DIR="dist"
            echo "Using Vite output directory: dist/"
          elif [ -d "build" ]; then
            BUILD_DIR="build"
            echo "Using CRA output directory: build/"
          else
            echo "ERROR: No build output found (tried dist/ and build/)"
            exit 1
          fi

          # Para evitar problemas com react-scripts no Azure, sempre usar serve
          echo "Setting up serve for static hosting..."
          npm install serve --save

          # Substituir o script start para usar serve
          if [ "$BUILD_DIR" == "dist" ]; then
            # Para Vite (pasta dist)
            node -e "const pkg=require('./package.json'); pkg.scripts.start='npx serve -s dist -l 8080'; require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"
          else
            # Para CRA (pasta build)
            node -e "const pkg=require('./package.json'); pkg.scripts.start='npx serve -s build -l 8080'; require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"
          fi
          echo "Updated start script to use serve for production"

          # Mostrar o package.json final
          echo "Final package.json scripts:"
          cat package.json | grep -A5 -B5 '"start"'

      - name: Zip artifact for deployment
        working-directory: ./frontend
        run: |
          # Incluir apenas arquivos essenciais para produção
          echo "Creating deployment package..."

          # Criar estrutura limpa para deployment
          mkdir -p deployment

          # Copiar arquivos essenciais
          cp package.json deployment/
          cp package-lock.json deployment/ 2>/dev/null || echo "No package-lock.json found"

          # Copiar pasta de build
          if [ -d "build" ]; then
            cp -r build deployment/
            echo "Copied build/ directory"
          elif [ -d "dist" ]; then
            cp -r dist deployment/
            echo "Copied dist/ directory"
          fi

          # Copiar node_modules apenas do serve (mais leve)
          mkdir -p deployment/node_modules
          cp -r node_modules/serve deployment/node_modules/ 2>/dev/null || echo "serve not found in node_modules"

          # Criar zip do deployment
          cd deployment
          zip -r ../release.zip .
          cd ..

          echo "Deployment package created:"
          ls -la release.zip
          echo "Package contents:"
          unzip -l release.zip | head -20

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: react-app
          path: ./frontend/release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    permissions:
      id-token: write

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: react-app

      - name: Unzip artifact for deployment
        run: |
          unzip release.zip
          rm release.zip

      - name: Install production dependencies
        run: |
          echo "Installing production dependencies..."
          npm install --production
          echo "Dependencies installed successfully"

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.APP_NAME_FRONTEND }}
          package: .

      - name: Verify deployment health
        run: |
          echo "Waiting for deployment to be ready..."
          APP_URL="https://${{ secrets.APP_NAME_FRONTEND }}.azurewebsites.net"

          for i in {1..12}; do
            echo "Health check attempt $i/12..."

            # Tentar acessar a URL do app
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL" || echo "000")

            # Aceitar qualquer resposta HTTP (2xx, 3xx, 4xx, 5xx) como sinal de que a app está rodando
            # Apenas 503 (Service Unavailable) ou 000 (sem resposta) indicam problema
            if [[ "$HTTP_CODE" =~ ^[2-5][0-9][0-9]$ ]] && [ "$HTTP_CODE" != "503" ]; then
              echo "✅ App is responding! (HTTP $HTTP_CODE)"
              echo "Deployment successful: $APP_URL"
              exit 0
            fi

            if [ "$HTTP_CODE" == "503" ]; then
              echo "⚠️ App returned HTTP 503 (Service Unavailable)"
            elif [ "$HTTP_CODE" != "000" ]; then
              echo "⚠️ App returned HTTP $HTTP_CODE"
            else
              echo "App not responding yet..."
            fi

            if [ $i -lt 12 ]; then
              echo "Waiting 15 seconds before next check..."
              sleep 15
            fi
          done

          echo "⚠️ App health check did not get a response after 3 minutes"
          echo "Deployment may still be initializing. Check: $APP_URL"
          echo "Note: This is a warning, not a failure. The deployment was completed."
          exit 0